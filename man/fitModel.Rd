% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/fitModel.R
\name{fitModel}
\alias{fitModel}
\alias{print.devMSM_models}
\title{Fit outcome model}
\usage{
fitModel(
  data,
  obj,
  weights = NULL,
  outcome,
  model = "m0",
  int_order = NA,
  covariates = NULL,
  family = gaussian(),
  link = "identity",
  verbose = FALSE,
  save.out = FALSE
)

\method{print}{devMSM_models}(x, i = NA, save.out = FALSE, ...)
}
\arguments{
\item{data}{data in wide format as: a data frame, list of imputed data
frames, or \code{mids} object from the \code{mice} package}

\item{obj}{initialized MSM object from \code{\link[=initMSM]{initMSM()}}}

\item{weights}{list of IPTW weights output from \code{\link[=createWeights]{createWeights()}}}

\item{outcome}{name of outcome variable with ".timepoint" suffix.
See \code{\link[=initMSM]{initMSM()}} for details on suffix}

\item{model}{character indicating one of the following outcome models:
\itemize{
\item "m0" (exposure main effects)
\item "m1" (exposure main effects & covariates)
\item "m2" (exposure main effects & their interactions)
\item "m3" (exposure main effects, their interactions, & covariates)
}}

\item{int_order}{integer specification of highest order exposure main effects
interaction, required for interaction models ("m2", "m3")}

\item{covariates}{list of characters reflecting variable names of covariates,
required for covariate models ("m1", "m3")}

\item{family}{(optional) family function specification for \code{\link[WeightIt:glm_weightit]{WeightIt::glm_weightit()}} model.
Note that this should be specified as as a function, not a character string unless you have
a multinomial outcome, in which case set this to "multinomial", or if you have an ordinal
outcome with more than 2 levels, in which case set this to "ordinal". (default is gaussian)}

\item{link}{(optional) link function specification for \code{\link[WeightIt:glm_weightit]{WeightIt::glm_weightit()}} model.}

\item{verbose}{(optional) TRUE or FALSE indicator for printing output to console.
default is FALSE.}

\item{save.out}{(optional) Either logical or a character string. If \code{TRUE},
it will output the result to a default file name within \code{home_dir} set in \code{initMSM()}. You can load the data with \code{x <- readRDS(file)}.
To use a non-default file name, specify a character string with the file name. It will save relative to \code{home_dir}.
There might be naming conflicts where two objects get saved to the same file. In these cases, users should specify a custom name.
default is FALSE.}

\item{x}{devMSM_models object from \code{fitModel}}

\item{i}{For multiply imputed datasets, \code{i} selects which imputation to print results for.
Default is \code{i = 1}. With \code{i = TRUE}, all imputed datasets will be looped over. With \code{i = NULL}, will average over all imputed datasets and summarize that. Ignored for non-imputed data.}

\item{...}{ignored}
}
\value{
list containing \code{\link[WeightIt:glm_weightit]{WeightIt::glm_weightit()}} model output. It is the length
of the number of datasets (1 for a data.frame or the number of imputed datasets)
}
\description{
Fits weighted marginal outcome model as a generalized linear model of the
user's choosing, relating exposure main effects to outcome using IPTW
weights.
}
\examples{
library(devMSMs)
data <- data.frame(
  ID = 1:50,
  A.1 = rnorm(n = 50),
  A.2 = rnorm(n = 50),
  A.3 = rnorm(n = 50),
  B.1 = rnorm(n = 50),
  B.2 = rnorm(n = 50),
  B.3 = rnorm(n = 50),
  C = rnorm(n = 50),
  D.3 = rnorm(n = 50)
)
obj <- initMSM(
  data,
  exposure = c("A.1", "A.2", "A.3"),
  ti_conf = c("C"),
  tv_conf = c("B.1", "B.2", "B.3", "D.3")
)
f <- createFormulas(obj, type = "short")
w <- createWeights(data = data, formulas = f)

fit_m0 <- fitModel(
  data = data, weights = w, 
  outcome = "D.3", model = "m0"
)
print(fit_m0)

fit_m1 <- fitModel(
  data = data, weights = w, 
  outcome = "D.3", model = "m1", 
  covariates = c("C")
)
print(fit_m1)

fit_m2 <- fitModel(
  data = data, weights = w, 
  outcome = "D.3", model = "m2", 
  int_order = 2
)
print(fit_m2)

fit_m3 <- fitModel(
  data = data, weights = w, 
  outcome = "D.3", model = "m3",
  int_order = 2, covariates = c("C")
)
print(fit_m3)

data <- data.frame(
  ID = 1:50,
  A.1 = rnorm(n = 50),
  A.2 = rnorm(n = 50),
  A.3 = rnorm(n = 50),
  B.1 = rnorm(n = 50),
  B.2 = rnorm(n = 50),
  B.3 = rnorm(n = 50),
  C = rnorm(n = 50),
  D.3 = c(rep(c("A", "B", "C"), 16), "A", "B")
)
obj <- initMSM(
  data,
  exposure = c("A.1", "A.2", "A.3"),
  ti_conf = c("C"),
  tv_conf = c("B.1", "B.2", "B.3", "D.3")
)
f <- createFormulas(obj, type = "short")
w <- createWeights(data = data, formulas = f)

fit_m0 <- fitModel(
  data = data, weights = w, 
  outcome = "D.3", model = "m0", family = "multinomial"
)
print(fit_m0)


}
\seealso{
\code{\link[WeightIt:glm_weightit]{WeightIt::glm_weightit()}} for more on family/link specifications.
}
